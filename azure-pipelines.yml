# Build numbering format
name: $(BuildID)

trigger:
  - feat/*
  - master
  - release

schedules:
  - cron: "0 12 * * 0"
    displayName: Weekly Sunday build
    always: true
    branches:
      include:
      - master

variables:
  - group: azure-demos-config

  - name: registry-namespace
    value: demos

  - name: app-name
    value: azure-nodejs-demo

  - name: app-services-name
    value: azure-nodejs-demo

  - name: image-name
    value: $(registry-namespace)/$(app-name)

  - name: image-name-with-registry
    value: $(registry-host)/$(image-name) # e.g. registry.azurecr.io/demos/app-name

  - name: image-tag
    value: $(Build.BuildId)-$(Build.SourceVersion) # e.g. 12-gitsha

stages:
- stage: Tests
  displayName: 'Test (Node.js)'
  jobs:
    - job: Audit
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - script: npm audit
        displayName: Audit Dependencies
        continueOnError: true

    - job: Linter
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - script: npm ci && npm run lint
        displayName: Lint Code

    - job: UnitTests
      displayName: Unit Tests
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - script: npm ci && npm run test
        displayName: Run Tests

# ----------------------------
# Docker Image: Build and Push
# ----------------------------

- stage: BuildImage
  displayName: 'Build (Docker)'
  jobs:
    - job: build_and_push_image
      displayName: Build and Push Image
      steps:

      # release: set version to package.json version
      - script: |
          echo '##vso[task.setvariable variable=image-tag]'$(npm run --silent my-version)''
          echo 'Project version is $(image-tag)'
          echo 'Image tag set to $(image-tag)'
        displayName: 'Overwrite image tag if `release` branch'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['Build.Reason'], 'Schedule'))

      - script: docker build --tag $(image-name-with-registry):$(image-tag) .
        displayName: 'Docker: Build and tag image'

      - task: Docker@1
        displayName: 'Push an image'
        inputs:
          azureSubscriptionEndpoint: $(registry-service-connection)
          azureContainerRegistry: $(registry-host)
          imageName: $(image-name):$(image-tag)
          command: push

      # release: lock image
      - task: AzureCLI@2
        displayName: 'Lock release image, preventing delete'
        inputs:
          azureSubscription:  $(registry-service-connection)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
              az --version
              az acr repository update \
                --name $(registry-acr-name) --image $(image-name):$(image-tag) \
                --write-enabled false
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['Build.Reason'], 'Schedule'))

# ----------------------------
# Deploy to Azure App Services
# ----------------------------

- stage: DeployImage
  displayName: Deploy
  jobs:
  - job: deploy_master
    displayName: 'Deploy Image (master)'
    steps:
    - task: AzureWebAppContainer@1
      displayName: Deploy container as Azure Web App
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        appName: $(app-services-name)-dev # add `-dev` suffix
        azureSubscription: $(appservice-service-connection)
        imageName: $(image-name-with-registry):$(image-tag)

  - job: deploy_release
    displayName: 'Deploy Image (release)'
    steps:
      # release: set version to package.json version
    - script: |
        echo '##vso[task.setvariable variable=image-tag]'$(npm run --silent my-version)''
        echo 'Project version is $(image-tag)'
        echo 'Image tag set to $(image-tag)'
      displayName: 'Overwrite image tag if `release` branch'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'), ne(variables['Build.Reason'], 'Schedule'))
    - task: AzureWebAppContainer@1
      displayName: Deploy container as Azure Web App
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
      inputs:
        appName: $(app-services-name)
        azureSubscription: $(appservice-service-connection)
        imageName: $(image-name-with-registry):$(image-tag)